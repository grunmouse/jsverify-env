
const typifyParser = require("typify-parser");
/**
 * Курим, мать его, DSL
 *
 */
 
/*
 
 * - звёздочка - это тип "true", в доке называется "ANY"
 _|_ - жопа - это тип "false", "NOTHING"
 () - пустая пара скобок - тип "unit"
 "a"
 'a' - в кавычках - тип "string", у него есть атрибут value
 123 - цифры - тип number - тоже со значением
 Плавающую точку не жрёт
 abc - буквы - тип ident - со значением
 a11 - буквы с цифрами тоже годятся
 a$1 - и доллар зашёл
 a_1 - и подчёркивание
 _1 - такое - тоже ident
 $aaa - короче, нормально всё, имена как в JS
 1$aaa - цифру парсит, дальше - игнорирует. Очевидно там где-то parseInt вкорячен
 true - тип bool со значением
 
 a:b - именованая пара или как-то так. "named" с атрибутом name=a, arg=<расшифровка b>
 a:b:c - та же хрень с правой рекурсией
 
 {} - пустая запись, тип record с атрибутом fields (объект)
 
 {a:b} - record с полем
 {a:b;c:1} - с двумя полями, причём никаких named, просто поля в объекте fields c распарсенными b и 1
 {a:b:d;c:1} - впрочем, named можно положить внутрь
 
 ∧ - эта странная буква обозначает пересечение, в данном случае - коньюкция
 1 & 2 - так выглядит коньюкция здорового человека (альтернативный синтаксис)
 1|* - а вот так дизьюкция (объединение)
 
 1&(1 | d) - скобочки для группировки операций - работают
 
 a? - постфиксный оператор "optional" с arg=<расшифровка a>
 
 a b - пробел это операция применения a к b. тип application, callee=a, args=[b] - типа массив
 a b c - функция с двумя аргументами args = [b,c] (расшифровки, естественно)
 
 a, b - тоже бинарная операция "product" 
 
 a... - постфиксный оператор 'variadic' 
 
 a->b - функция с типом аргумента и типом результата, type=function, arg=a, result=b
 
 [a] - унарный оператор brakets
 [a,b,c] - туда можно класть разное
 
 rec a -> b такая конструкция обозначает тип 'recursive' с name=a arg=<b>
 
 никакой ; за пределами литерала объекта не предусмотрено
*/

/*
Приоритет операторов
9 rec - prefic, r-ass
8 ? - postfix
7 [space] - infix - l-ass
6 & - infix - ass
5 | - infix - ass
4 ... - postfix
3 : - infix - l-ass
2 , - infix - ass
1 -> - infix - r-ass
0 ; - infix - ass
*/

/**
 * @function typifyParser.freeVars(t)
 * Возвращает список идентификаторов (ident) в AST t
 */
